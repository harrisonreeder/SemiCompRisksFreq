// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// nlogLikPW_uni
double nlogLikPW_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_nlogLikPW_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikPW_uni(para, y, delta, X, basis, dbasis, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradPW_uni
arma::vec ngradPW_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradPW_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradPW_uni(para, y, delta, X, basis, dbasis, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradPW_uni_mat
arma::mat ngradPW_uni_mat(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradPW_uni_mat(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradPW_uni_mat(para, y, delta, X, basis, dbasis, weights));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikPW_ID
double nlogLikPW_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_nlogLikPW_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikPW_ID(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradPW_ID
arma::vec ngradPW_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradPW_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradPW_ID(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradPW_ID_mat
arma::mat ngradPW_ID_mat(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradPW_ID_mat(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradPW_ID_mat(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikRP_uni
double nlogLikRP_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::mat& basis_yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_nlogLikRP_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP basis_yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis_yL(basis_yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikRP_uni(para, y, delta, X, basis, dbasis, basis_yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_uni
arma::vec ngradRP_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::mat& basis_yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradRP_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP basis_yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis_yL(basis_yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_uni(para, y, delta, X, basis, dbasis, basis_yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_uni_mat
arma::mat ngradRP_uni_mat(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::mat& dbasis, const arma::mat& basis_yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradRP_uni_mat(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP dbasisSEXP, SEXP basis_yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis(dbasisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis_yL(basis_yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_uni_mat(para, y, delta, X, basis, dbasis, basis_yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikRP_ID
double nlogLikRP_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis3_y1, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_nlogLikRP_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis3_y1SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3_y1(basis3_y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikRP_ID(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis3_y1, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_ID
arma::vec ngradRP_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis3_y1, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradRP_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis3_y1SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3_y1(basis3_y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_ID(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis3_y1, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradRP_ID_mat
arma::mat ngradRP_ID_mat(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis3_y1, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::mat& dbasis1, const arma::mat& dbasis2, const arma::mat& dbasis3, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradRP_ID_mat(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis3_y1SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP dbasis1SEXP, SEXP dbasis2SEXP, SEXP dbasis3SEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3_y1(basis3_y1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis1(dbasis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis2(dbasis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type dbasis3(dbasis3SEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradRP_ID_mat(para, y1, y2, delta1, delta2, anyLT, X1, X2, X3, basis1, basis2, basis3, basis3_y1, basis1_yL, basis2_yL, dbasis1, dbasis2, dbasis3, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikBS_uni
double nlogLikBS_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::vec& weights, const arma::vec& quad_weights);
RcppExport SEXP _SemiCompRisksFreq_nlogLikBS_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikBS_uni(para, y, delta, X, basis, weights, quad_weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradBS_uni
arma::vec ngradBS_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::vec& weights, const arma::vec& quad_weights);
RcppExport SEXP _SemiCompRisksFreq_ngradBS_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradBS_uni(para, y, delta, X, basis, weights, quad_weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradBS_uni_mat
arma::mat ngradBS_uni_mat(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::mat& basis, const arma::vec& weights, const arma::vec& quad_weights);
RcppExport SEXP _SemiCompRisksFreq_ngradBS_uni_mat(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP basisSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradBS_uni_mat(para, y, delta, X, basis, weights, quad_weights));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikBS_ID
double nlogLikBS_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::vec& yL, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::vec& weights, const arma::vec& quad_weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_nlogLikBS_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikBS_ID(para, y1, y2, delta1, delta2, yL, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, weights, quad_weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradBS_ID
arma::vec ngradBS_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::vec& yL, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::vec& weights, const arma::vec& quad_weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradBS_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradBS_ID(para, y1, y2, delta1, delta2, yL, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, weights, quad_weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradBS_ID_mat
arma::mat ngradBS_ID_mat(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::vec& yL, const int anyLT, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::mat& basis1, const arma::mat& basis2, const arma::mat& basis3, const arma::mat& basis1_yL, const arma::mat& basis2_yL, const arma::vec& weights, const arma::vec& quad_weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradBS_ID_mat(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP basis1SEXP, SEXP basis2SEXP, SEXP basis3SEXP, SEXP basis1_yLSEXP, SEXP basis2_yLSEXP, SEXP weightsSEXP, SEXP quad_weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1(basis1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2(basis2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis3(basis3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis1_yL(basis1_yLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type basis2_yL(basis2_yLSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type quad_weights(quad_weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradBS_ID_mat(para, y1, y2, delta1, delta2, yL, anyLT, X1, X2, X3, basis1, basis2, basis3, basis1_yL, basis2_yL, weights, quad_weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikWB_uni
double nlogLikWB_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::vec& yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_nlogLikWB_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikWB_uni(para, y, delta, X, yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_uni
arma::vec ngradWB_uni(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::vec& yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradWB_uni(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_uni(para, y, delta, X, yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_uni_mat
arma::mat ngradWB_uni_mat(const arma::vec& para, const arma::vec& y, const arma::vec& delta, const arma::mat& X, const arma::vec& yL, const int anyLT, const arma::vec& weights);
RcppExport SEXP _SemiCompRisksFreq_ngradWB_uni_mat(SEXP paraSEXP, SEXP ySEXP, SEXP deltaSEXP, SEXP XSEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_uni_mat(para, y, delta, X, yL, anyLT, weights));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikWB_ID
double nlogLikWB_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::vec& yL, const int anyLT, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_nlogLikWB_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikWB_ID(para, y1, y2, delta1, delta2, X1, X2, X3, yL, anyLT, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID
arma::vec ngradWB_ID(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::vec& yL, const int anyLT, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradWB_ID(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID(para, y1, y2, delta1, delta2, X1, X2, X3, yL, anyLT, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// ngradWB_ID_mat
arma::mat ngradWB_ID_mat(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::vec& yL, const int anyLT, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_ngradWB_ID_mat(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(ngradWB_ID_mat(para, y1, y2, delta1, delta2, X1, X2, X3, yL, anyLT, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// nhessWB_ID_frail_SM
arma::mat nhessWB_ID_frail_SM(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksFreq_nhessWB_ID_frail_SM(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(nhessWB_ID_frail_SM(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// nhessWB_ID_frail_M
arma::mat nhessWB_ID_frail_M(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3);
RcppExport SEXP _SemiCompRisksFreq_nhessWB_ID_frail_M(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    rcpp_result_gen = Rcpp::wrap(nhessWB_ID_frail_M(para, y1, y2, delta1, delta2, X1, X2, X3));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikWB_ID_theta
double nlogLikWB_ID_theta(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::vec& yL, const int anyLT, const std::string model, const arma::vec& weights, const int frailty_ind);
RcppExport SEXP _SemiCompRisksFreq_nlogLikWB_ID_theta(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikWB_ID_theta(para, y1, y2, delta1, delta2, X1, X2, X3, yL, anyLT, model, weights, frailty_ind));
    return rcpp_result_gen;
END_RCPP
}
// nlogLikWB_ID_marg
double nlogLikWB_ID_marg(const arma::vec& para, const arma::vec& y1, const arma::vec& y2, const arma::vec& delta1, const arma::vec& delta2, const arma::mat& X1, const arma::mat& X2, const arma::mat& X3, const arma::vec& yL, const int anyLT, const std::string model, const arma::vec& weights, const int frailty_ind, const arma::vec& gauss_nodes, const arma::vec& gauss_weights);
RcppExport SEXP _SemiCompRisksFreq_nlogLikWB_ID_marg(SEXP paraSEXP, SEXP y1SEXP, SEXP y2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP X1SEXP, SEXP X2SEXP, SEXP X3SEXP, SEXP yLSEXP, SEXP anyLTSEXP, SEXP modelSEXP, SEXP weightsSEXP, SEXP frailty_indSEXP, SEXP gauss_nodesSEXP, SEXP gauss_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para(paraSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X3(X3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type yL(yLSEXP);
    Rcpp::traits::input_parameter< const int >::type anyLT(anyLTSEXP);
    Rcpp::traits::input_parameter< const std::string >::type model(modelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type frailty_ind(frailty_indSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gauss_nodes(gauss_nodesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gauss_weights(gauss_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(nlogLikWB_ID_marg(para, y1, y2, delta1, delta2, X1, X2, X3, yL, anyLT, model, weights, frailty_ind, gauss_nodes, gauss_weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SemiCompRisksFreq_nlogLikPW_uni", (DL_FUNC) &_SemiCompRisksFreq_nlogLikPW_uni, 7},
    {"_SemiCompRisksFreq_ngradPW_uni", (DL_FUNC) &_SemiCompRisksFreq_ngradPW_uni, 7},
    {"_SemiCompRisksFreq_ngradPW_uni_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradPW_uni_mat, 7},
    {"_SemiCompRisksFreq_nlogLikPW_ID", (DL_FUNC) &_SemiCompRisksFreq_nlogLikPW_ID, 19},
    {"_SemiCompRisksFreq_ngradPW_ID", (DL_FUNC) &_SemiCompRisksFreq_ngradPW_ID, 19},
    {"_SemiCompRisksFreq_ngradPW_ID_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradPW_ID_mat, 19},
    {"_SemiCompRisksFreq_nlogLikRP_uni", (DL_FUNC) &_SemiCompRisksFreq_nlogLikRP_uni, 9},
    {"_SemiCompRisksFreq_ngradRP_uni", (DL_FUNC) &_SemiCompRisksFreq_ngradRP_uni, 9},
    {"_SemiCompRisksFreq_ngradRP_uni_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradRP_uni_mat, 9},
    {"_SemiCompRisksFreq_nlogLikRP_ID", (DL_FUNC) &_SemiCompRisksFreq_nlogLikRP_ID, 21},
    {"_SemiCompRisksFreq_ngradRP_ID", (DL_FUNC) &_SemiCompRisksFreq_ngradRP_ID, 21},
    {"_SemiCompRisksFreq_ngradRP_ID_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradRP_ID_mat, 21},
    {"_SemiCompRisksFreq_nlogLikBS_uni", (DL_FUNC) &_SemiCompRisksFreq_nlogLikBS_uni, 7},
    {"_SemiCompRisksFreq_ngradBS_uni", (DL_FUNC) &_SemiCompRisksFreq_ngradBS_uni, 7},
    {"_SemiCompRisksFreq_ngradBS_uni_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradBS_uni_mat, 7},
    {"_SemiCompRisksFreq_nlogLikBS_ID", (DL_FUNC) &_SemiCompRisksFreq_nlogLikBS_ID, 18},
    {"_SemiCompRisksFreq_ngradBS_ID", (DL_FUNC) &_SemiCompRisksFreq_ngradBS_ID, 18},
    {"_SemiCompRisksFreq_ngradBS_ID_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradBS_ID_mat, 18},
    {"_SemiCompRisksFreq_nlogLikWB_uni", (DL_FUNC) &_SemiCompRisksFreq_nlogLikWB_uni, 7},
    {"_SemiCompRisksFreq_ngradWB_uni", (DL_FUNC) &_SemiCompRisksFreq_ngradWB_uni, 7},
    {"_SemiCompRisksFreq_ngradWB_uni_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradWB_uni_mat, 7},
    {"_SemiCompRisksFreq_nlogLikWB_ID", (DL_FUNC) &_SemiCompRisksFreq_nlogLikWB_ID, 13},
    {"_SemiCompRisksFreq_ngradWB_ID", (DL_FUNC) &_SemiCompRisksFreq_ngradWB_ID, 13},
    {"_SemiCompRisksFreq_ngradWB_ID_mat", (DL_FUNC) &_SemiCompRisksFreq_ngradWB_ID_mat, 13},
    {"_SemiCompRisksFreq_nhessWB_ID_frail_SM", (DL_FUNC) &_SemiCompRisksFreq_nhessWB_ID_frail_SM, 8},
    {"_SemiCompRisksFreq_nhessWB_ID_frail_M", (DL_FUNC) &_SemiCompRisksFreq_nhessWB_ID_frail_M, 8},
    {"_SemiCompRisksFreq_nlogLikWB_ID_theta", (DL_FUNC) &_SemiCompRisksFreq_nlogLikWB_ID_theta, 13},
    {"_SemiCompRisksFreq_nlogLikWB_ID_marg", (DL_FUNC) &_SemiCompRisksFreq_nlogLikWB_ID_marg, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_SemiCompRisksFreq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
